项目中的接口需要更加明确，请根据如下接口，更新API层
请求的消息格式为：
pub enum RequestMessage {
    Allocate {
        session_id: String,
        resources: Vec<u16>,
    },
    Release {
        session_id: String,
        resources: Vec<u16>,
    },
    Query {
        session_id: String,
    },
    Heartbeat {
        session_id: String,
    },
    Exit,
}

响应的消息格式为：
pub enum ResponseMessage {
    AllocateResp {
        session_id: String,
        success_resources: Vec<u16>,
        failed_resources: Vec<(u16, String)>, // (resource_id, error_reason)
    },
    ReleaseResp {
        session_id: String,
    },
    QueryResp {
        session_id: String,
        resources: Vec<u16>,
    },
    HeartbeatResp {
        session_id: String,
    },
}


请在server_test.rs中实现如下测试用例：
2、多用户接入
多个用户并发接入后，校验每个用户的session都不同。
3、用户申请资源
用户申请资源后，校验资源是否申请成功。
4、多用户申请资源
多个用户并发申请不同资源后，校验每个用户的资源申请是否成功。
5、多用户申请相同资源
多个用户并发申请相同资源后，校验同一个资源只有一个用户申请成功。
6、用户释放资源
用户释放资源后，校验资源是否释放成功。
7、多用户释放资源
多个用户并发释放资源后，校验每个用户的资源释放是否成功。
8、用户心跳
用户心跳后，校验session是否存在。
9、多用户心跳
多个用户并发心跳后，校验每个用户的session是否存在。
10、用户退出
用户退出后，校验session是否不存在。
注意事项：
create_test_server函数返回的 TestServer 和 ApiServer ，TestServer用于执行测试用例的所有操作，ApiServer用户校验数据；申请资源都使用TestServer，不要直接调用ApiServer接口添加用户或申请资源。

先保证测试用例能够编译通过，目前功能不完善，部分测试用例无法通过，可以接收，但是测试用例要符合上述要求。